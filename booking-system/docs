https://docs.google.com/document/d/e/2PACX-1vRB2CeYBwmLYMAjcOW6XTYUB3ANxmpd7PhhBxv_ZjsnGXN31YCBgtrYm1HBgVh4YJ4IO8-s8O8n4KCk/pub?urp=gmail_link

above is a link of assesment .
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

project structure : 

booking-system/
├─ pom.xml
├─ README.md
├─ src/
│  ├─ main/
│  │  ├─ java/
│  │  │  └─ com/example/booking/
│  │  │     ├─ BookingApplication.java
│  │  │     ├─ config/
│  │  │     │  ├─ SecurityConfig.java
│  │  │     │  ├─ JwtAuthenticationFilter.java
│  │  │     │  └─ JwtTokenProvider.java
│  │  │     ├─ controller/
│  │  │     │  ├─ AuthController.java
│  │  │     │  ├─ ResourceController.java
│  │  │     │  └─ ReservationController.java
│  │  │     ├─ dto/
│  │  │     │  ├─ AuthRequest.java
│  │  │     │  ├─ AuthResponse.java
│  │  │     │  ├─ ResourceDto.java
│  │  │     │  ├─ ReservationDto.java
│  │  │     │  └─ CreateReservationRequest.java
│  │  │     ├─ entity/
│  │  │     │  ├─ AppUser.java
│  │  │     │  ├─ ResourceEntity.java
│  │  │     │  ├─ Reservation.java
│  │  │     │  ├─ ReservationStatus.java
│  │  │     │  └─ Role.java
│  │  │     ├─ repository/
│  │  │     │  ├─ UserRepository.java
│  │  │     │  ├─ ResourceRepository.java
│  │  │     │  └─ ReservationRepository.java
│  │  │     ├─ security/
│  │  │     │  └─ CustomUserDetailsService.java
│  │  │     ├─ service/
│  │  │     │  ├─ AuthService.java
│  │  │     │  ├─ ResourceService.java
│  │  │     │  └─ ReservationService.java
│  │  │     ├─ util/
│  │  │     │  └─ ReservationSpecifications.java
│  │  │     ├─ exception/
│  │  │     │  ├─ NotFoundException.java
│  │  │     │  └─ GlobalExceptionHandler.java
│  │  │     └─ seed/
│  │  │        └─ DataSeeder.java
│  │  └─ resources/
│  │     ├─ application.properties
│  │     └─ data.sql (optional)
└─
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

POM.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>booking-system</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>Booking System</name>
  <description>RESTful booking system with JWT and RBAC</description>

  <properties>
    <java.version>17</java.version>
    <spring.boot.version>3.2.0</spring.boot.version>
    <jjwt.version>0.11.5</jjwt.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Spring Boot starters -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Validation -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- MySQL driver (switch to postgres if needed) -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- JWT -->
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>${jjwt.version}</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>${jjwt.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>${jjwt.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Lombok -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- OpenAPI / Swagger -->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.1.0</version>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- Compiler plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <!-- Spring Boot plugin -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) src/main/resources/application.properties
# --- Datasource (MySQL example) ---
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/booking_db?createDatabaseIfNotExist=true&serverTimezone=UTC}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- JWT ---
jwt.secret=${JWT_SECRET:change-this-secret-in-prod}
jwt.expiration-ms=${JWT_EXPIRATION_MS:3600000}

# --- Server ---
server.port=8080

Important: Set JWT_SECRET and datasource env variables before running in production.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Java source files

All files use package com.example.booking. Use exactly that package when creating files.

BookingApplication.java
package com.example.booking;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BookingApplication {
    public static void main(String[] args) {
        SpringApplication.run(BookingApplication.class, args);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Entities
entity/Role.java

package com.example.booking.entity;

public enum Role {
    ROLE_ADMIN,
    ROLE_USER
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

entity/ReservationStatus.java

package com.example.booking.entity;

public enum ReservationStatus {
    PENDING,
    CONFIRMED,
    CANCELLED
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
